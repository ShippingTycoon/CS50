#include "helpers.h"

// Convert image to grayscale
void grayscale(int height, int width, RGBTRIPLE image[height][width])
{
    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            float average = (image[i][j].rgbtBlue + image[i][j].rgbtGreen + image[i][j].rgbtRed) / 3;
            int av = (int) (average + 0.5);
            image[i][j].rgbtBlue = av;
            image[i][j].rgbtGreen = av;
            image[i][j].rgbtRed = av;
        }
    }
    return;
}

// Reflect image horizontally
void reflect(int height, int width, RGBTRIPLE image[height][width])
{
    for (int i = 0; i < height; i ++)
    {
        for (int j = 0; j < (width / 2); j ++)
        {
            int temp[3] = {image[i][j].rgbtBlue, image[i][j].rgbtGreen, image[i][j].rgbtRed};
            image[i][j].rgbtBlue = image[i][width - 1 - j].rgbtBlue;
            image[i][j].rgbtGreen = image[i][width - 1 - j].rgbtGreen;
            image[i][j].rgbtRed = image[i][width - 1 - j].rgbtRed;
            image[i][width - 1 - j].rgbtBlue = temp[0];
            image[i][width - 1 - j].rgbtGreen = temp[1];
            image[i][width - 1 - j].rgbtRed = temp[2];
        }
    }
    return;
}

// Blur image
void blur(int height, int width, RGBTRIPLE image[height][width])
{
    int avgb = 0;
    int avgg = 0;
    int avgr = 0;
    for (int i = 0; i < height; i ++)
    {
        for (int j = 0; j < width; j ++)
        {
            if (i = 0 && j = 0)
            {

            }
            if (i = 0 && j = (width - 1))
            {

            }
            if (i = (height - 1) && j = (width - 1))
            {

            }
            if (i = (height - 1) && j = 0)
            {

            }
            if (i = 0)
            {

            }
            if (i = (height - 1))
            {

            }
            if (j = 0)
            {

            }
            if (j = (width - 1))
            {

            }
            else
            {
               for(int k = (i - 1); k <= (i + 1); k ++)
               {
                   for (int l = (j - 1); l <= (j + 1); l ++)
                   {
                       avgb = avgb + image[k][l].rgbtBlue;
                       avgg = avgg + image[k][l].rgbtGreen;
                       avgr = avgr + image[k][l].rgbtR;
                   }
               }
               avgb = avgb / 9;
               avgg = avgg / 9;
               avgr = avgr / 9;
            }
            image[i][j].rgbtBlue = avgb;
            image[i][j].rgbtGreen = avgg;
            image[i][j].rgbtRed = avgr;
        }
    }
    return;
}

// Detect edges
void edges(int height, int width, RGBTRIPLE image[height][width])
{
    return;
}
